---
import { getCollection } from "astro:content";
import ThemeSwitcher from "@components/base/ThemeSwitcher.astro";
import DestinationsList from "@components/destinations/DestinationsList.astro";
import { IoSearch } from "react-icons/io5";

const { pathname } = Astro.url;

const stickyHeader = true;

interface MenuItem {
  name: string;
  url: string;
  disabled: boolean;
  dropdown?: boolean;
}

const menu: MenuItem[] = [
  {
    name: "Home",
    url: "/",
    disabled: false,
  },
  {
    name: "About Us",
    url: "/about",
    disabled: false,
  },
  {
    name: "Docs",
    url: "/docs",
    disabled: false,
  },
  {
    name: "Blog",
    url: "/blog",
    disabled: false,
  },
  {
    name: "Destinations",
    url: "/destinations",
    disabled: false,
    dropdown: true,
  },
  {
    name: "Shop",
    url: "/shop",
    disabled: false,
  },
  {
    name: "Contact",
    url: "/contact",
    disabled: false,
  },
];

let destinationsLink;
let destinationsMenu;
---

<header
  transition:persist
  class={`container glass py-2 z-30 mb-4 lg:mt-4 lg:rounded-lg text-xl ${stickyHeader && "sticky top-0"}`}
>
  <nav class="relative flex flex-wrap items-center justify-between">
    <!-- navbar toggler -->
    <input id="nav-toggle" type="checkbox" class="hidden" />
    <label
      for="nav-toggle"
      class="order-0 cursor-pointer flex items-center md:hidden text-txt-p dark:text-darkmode-txt-p lg:order-1"
    >
      <svg id="show-button" class="h-6 fill-current block" viewBox="0 0 20 20">
        <title>Menu Open</title>
        <path d="M0 3h20v2H0V3z m0 6h20v2H0V9z m0 6h20v2H0V0z"></path>
      </svg>
      <svg id="hide-button" class="h-6 fill-current hidden" viewBox="0 0 20 20">
        <title>Menu Close</title>
        <polygon
          points="11 9 22 9 22 11 11 11 11 22 9 22 9 11 -2 11 -2 9 9 9 9 -2 11 -2"
          transform="rotate(45 10 10)"></polygon>
      </svg>
    </label>
    <!-- /navbar toggler -->
    <ul
      id="nav-menu"
      class="text-center lg:text-left order-3 hidden w-full pb-6 md:order-1 md:flex md:w-auto md:space-x-2 md:pb-0 lg:space-x-4"
    >
      {
        menu.map((item) => (
          <li class="">
            <a
              href={item.disabled ? undefined : item.url}
              id={`nav-bar-${item.name.toLowerCase()}-link`}
              class={`block p-2 font-secondary font-semibold text-txt-p transition dark:text-darkmode-txt-p lg:px-2 lg:py-3 ${
                (pathname === `${item.url}/` || pathname === item.url) &&
                "active"
              } ${item.disabled ?? "pointer-events-none"}`}
            >
              {item.name}
              {item.dropdown && (
                <svg
                  class="inline w-4 h-4 ml-1"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path
                    fill-rule="evenodd"
                    d="M5.23 7.21a.75.75 0 011.06.02L10 10.584l3.71-3.354a.75.75 0 111.02 1.1l-4.25 3.84a.75.75 0 01-1.02 0l-4.25-3.84a.75.75 0 01.02-1.06z"
                    clip-rule="evenodd"
                  />
                </svg>
              )}
            </a>
          </li>
        ))
      }
    </ul>
    <div class="order-1 ml-auto flex items-center md:order-2 lg:ml-0">
      <a
        class="mr-4 inline-block border-border text-xl text-txt-p dark:border-darkmode-border dark:text-darkmode-txt-p"
        href="/search"
        aria-label="search"
      >
        <IoSearch />
      </a>
    </div>
  </nav>
</header>
<DestinationsList />

<script is:inline>
  document.addEventListener("DOMContentLoaded", function () {
    setupDestinationsMenu();

    // Re-attach listeners after Astro View Transitions
    document.addEventListener("astro:after-swap", function () {
      setupDestinationsMenu();
    });
  });

  function setupDestinationsMenu() {
    const destinationsLink = document.getElementById(
      "nav-bar-destinations-link",
    );
    const destinationsMenu = document.getElementById("destinations-toggle-parent");

    if (!destinationsLink || !destinationsMenu) {
      return;
    }

    // Close any open menu first
    destinationsMenu.classList.remove("open");

    let timeoutId;

    function startCloseTimer() {
      timeoutId = setTimeout(() => {
        destinationsMenu.classList.remove("open");
      }, 150);
    }

    // Open menu when hovering over the link
    destinationsLink.addEventListener("mouseenter", () => {
      clearTimeout(timeoutId);
      destinationsMenu.classList.add("open");
    });

    // Open menu when hovering over the menu itself
    destinationsMenu.addEventListener("mouseenter", () => {
      clearTimeout(timeoutId);
      destinationsMenu.classList.add("open");
    });

    // Start close timer when leaving either element
    destinationsLink.addEventListener("mouseleave", startCloseTimer);
    destinationsMenu.addEventListener("mouseleave", startCloseTimer);
  }
</script>
